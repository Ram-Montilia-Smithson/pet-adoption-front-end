[{"C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\components\\home-page.js":"1","C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\components\\profile-settings.js":"2","C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\components\\login.js":"3","C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\components\\signup.js":"4","C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\components\\my-pets-page.js":"5","C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\context\\context.js":"6","C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\App.js":"7","C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\components\\search-page.js":"8","C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\components\\dashboard.js":"9","C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\lib\\api.js":"10","C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\components\\addPet.js":"11","C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\reportWebVitals.js":"12","C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\components\\search-results.js":"13","C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\components\\pet-page.js":"14","C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\components\\allUsers.js":"15","C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\components\\allPets.js":"16"},{"size":2277,"mtime":1609684598948,"results":"17","hashOfConfig":"18"},{"size":5763,"mtime":1609861061892,"results":"19","hashOfConfig":"18"},{"size":3706,"mtime":1609793342613,"results":"20","hashOfConfig":"18"},{"size":6663,"mtime":1609793389015,"results":"21","hashOfConfig":"18"},{"size":1347,"mtime":1608497584845,"results":"22","hashOfConfig":"18"},{"size":280,"mtime":1609795681891,"results":"23","hashOfConfig":"18"},{"size":2909,"mtime":1609863857344,"results":"24","hashOfConfig":"18"},{"size":7197,"mtime":1609612782810,"results":"25","hashOfConfig":"18"},{"size":2815,"mtime":1609617777614,"results":"26","hashOfConfig":"18"},{"size":5238,"mtime":1609860805179,"results":"27","hashOfConfig":"18"},{"size":9099,"mtime":1609617910105,"results":"28","hashOfConfig":"18"},{"size":375,"mtime":1607975660008,"results":"29","hashOfConfig":"18"},{"size":1134,"mtime":1609081375559,"results":"30","hashOfConfig":"18"},{"size":2154,"mtime":1608499766823,"results":"31","hashOfConfig":"18"},{"size":186,"mtime":1609617941812,"results":"32","hashOfConfig":"18"},{"size":185,"mtime":1609617935781,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},"nc3qmk",{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"55"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\components\\home-page.js",["75"],"import Login from \"./login\"\r\nimport Signup from \"./signup\"\r\nimport UserContext from \"../context/context\"\r\nimport React, { useContext, useState, useEffect } from \"react\"\r\nimport { Modal } from \"react-bootstrap\"\r\n\r\nfunction Homepage() {\r\n\r\n    // useEffect(() => {\r\n    //     //GET message from server using fetch api\r\n    //     fetch('/api/home')\r\n    //         .then(res => res.text())\r\n    //         .then(res => this.setState({ message: res }));\r\n    //     // return () => {cleanup}\r\n    // }, [])\r\n\r\n    const userContext = useContext(UserContext)\r\n    const [isLoginOpen, setIsLoginOpen] = useState(false);\r\n    const [isSignupOpen, setIsSignupOpen] = useState(false);\r\n\r\n    const openLoginModal = () => {\r\n        setIsLoginOpen(true)\r\n    }\r\n\r\n    const closeLoginModal = () => {\r\n        setIsLoginOpen(false)\r\n    }\r\n\r\n    const openSignupModal = () => {\r\n        setIsSignupOpen(true)\r\n    }\r\n\r\n    const closeSignupModal = () => {\r\n        setIsSignupOpen(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {userContext.login ?\r\n                <h1>Welcome to the pet adoption website {userContext.firstName} {userContext.lastName}</h1>\r\n                :\r\n                <div>\r\n                    <h1>Welcome to the site!</h1>\r\n                    <p>description to the service provided</p>\r\n                    <button\r\n                        onClick={openLoginModal}\r\n                    >\r\n                        Login\r\n                    </button>\r\n                    <button\r\n                        onClick={openSignupModal}\r\n                    >\r\n                        Signup\r\n                    </button>\r\n                    <br />\r\n                    <Modal\r\n                        show={isSignupOpen}\r\n                        onHide={closeSignupModal}\r\n                    >\r\n                        <Signup />\r\n                    </Modal>\r\n                    <Modal\r\n                        show={isLoginOpen}\r\n                        onHide={closeLoginModal}\r\n                    >\r\n                        <Login />\r\n                    </Modal>\r\n                </div>\r\n            }\r\n            {userContext.admin && <h1 className=\"text-center mb-4 mt-5\">Admin</h1>}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Homepage","C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\components\\profile-settings.js",["76"],"import UserContext from \"../context/context\"\r\nimport { Form, Button, Card} from \"react-bootstrap\";\r\nimport React, { useContext, useState } from \"react\"\r\nimport { updateUserById, getUsers } from \"../lib/api\";\r\n\r\n\r\nfunction ProfileSettings() {\r\n\r\n    const userContext = useContext(UserContext)\r\n\r\n    const [confirmationPassword, setConfirmationPassword] = useState(\"\")\r\n    const [profileData, setProfileData] = useState({\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        password: \"\",\r\n        email: \"\",\r\n        tel: \"\",\r\n        bio: \"\",\r\n    });\r\n\r\n    const handleOnSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (profileData.password === confirmationPassword) {\r\n            // Ensure that if the email is being changed itâ€™s not already in use\r\n            let newUserInfo = {}\r\n            for (const property in profileData) {if (profileData[property] !== \"\") { newUserInfo[property] = profileData[property]}}\r\n            console.log(userContext._id);\r\n            updateUserById(userContext._id, newUserInfo)\r\n            setConfirmationPassword(\"\")\r\n            setProfileData({ firstName: \"\", lastName: \"\", password: \"\", email: \"\", tel: \"\", bio: \"\"})\r\n        }\r\n        else { console.log(\"passwords do not match\"); }\r\n    };\r\n\r\n    return (\r\n        <Card className=\"d-flex align-items-center justify-content-center bg-transparent\">\r\n            <Card.Body>\r\n                <h2 className=\"text-center mb-4\">Profile Settings</h2>\r\n                {userContext.admin && <h3>Admin</h3>}\r\n                <Form\r\n                    className=\"bg-light\"\r\n                    onSubmit={(event) => handleOnSubmit(event)}\r\n                    // action=\"settings\"\r\n                    method=\"post\"\r\n                    encType=\"multipart/form-data\"\r\n                >\r\n                    <Form.Group id=\"first-name\">\r\n                        <Form.Label>New First Name</Form.Label>\r\n                        <Form.Control\r\n                            placeholder={userContext.firstName}\r\n                            type=\"text\"\r\n                            onChange={(event) => setProfileData({ ...profileData, firstName: event.target.value })}\r\n                            value={profileData.firstName}\r\n                            name=\"first name\"\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group id=\"last-name\">\r\n                        <Form.Label>New Last Name</Form.Label>\r\n                        <Form.Control\r\n                            placeholder={userContext.lastName}\r\n                            type=\"text\"\r\n                            onChange={(event) => setProfileData({ ...profileData, lastName: event.target.value })}\r\n                            value={profileData.lastName}\r\n                            name=\"last name\"\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group id=\"tel\">\r\n                        <Form.Label>New Phone Number</Form.Label>\r\n                        <Form.Control\r\n                            placeholder={userContext.tel}\r\n                            type=\"tel\"\r\n                            onChange={(event) => setProfileData({ ...profileData, tel: event.target.value })}\r\n                            value={profileData.tel}\r\n                            name=\"tel\"\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group id=\"email\">\r\n                        <Form.Label>New Email</Form.Label>\r\n                        <Form.Control\r\n                            placeholder={userContext.email}\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            onChange={(event) => setProfileData({ ...profileData, email: event.target.value })}\r\n                            value={profileData.email}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group id=\"password\">\r\n                        <Form.Label>New Password</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder=\"Password\"\r\n                            onChange={(event) => setProfileData({ ...profileData, password: event.target.value })}\r\n                            value={profileData.password}\r\n                            required\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group id=\"password-confirm\">\r\n                        <Form.Label>New Password Confirmation</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder=\"Password\"\r\n                            onChange={(event) => setConfirmationPassword(event.target.value)}\r\n                            value={confirmationPassword}\r\n                            required\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group id=\"bio\">\r\n                        <Form.Label>New Bio textarea</Form.Label>\r\n                        <Form.Control\r\n                            placeholder={userContext.bio} //consider fetching data in advance\r\n                            as=\"textarea\"\r\n                            rows={3}\r\n                            onChange={(event) => setProfileData({ ...profileData, bio: event.target.value })}\r\n                            value={profileData.bio}\r\n                        />\r\n                    </Form.Group>\r\n                    <Button className=\"w-100\" type=\"submit\">\r\n                        save changes\r\n                    </Button>\r\n                </Form>\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\nexport default ProfileSettings","C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\components\\login.js",["77"],"C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\components\\signup.js",[],"C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\components\\my-pets-page.js",[],"C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\context\\context.js",["78"],"import React from \"react\"\r\n\r\nlet { user } = require(\"../data.json\")\r\nlet uu = JSON.parse(window.localStorage.getItem(\"user\"))\r\nconsole.log(uu);\r\nconst UserContext = React.createContext(uu)\r\nexport default UserContext\r\n\r\n\r\n// // 5fe875e5a60ccb614872b295 is the id of the admin user","C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\App.js",["79","80","81","82","83","84","85","86","87","88"],"import './App.css';\r\nimport AddPet from \"./components/addPet\"\r\nimport Dashboard from \"./components/dashboard\";\r\nimport Homepage from './components/home-page';\r\nimport MyPetsPage from './components/my-pets-page';\r\nimport ProfileSettings from './components/profile-settings';\r\nimport Search from './components/search-page';\r\nimport { BrowserRouter as Router, Route, Switch, Link, } from \"react-router-dom\"\r\nimport { Button, Navbar } from \"react-bootstrap\"\r\nimport UserContext from \"./context/context\"\r\nimport React, { useContext, useEffect} from \"react\"\r\nimport PetPage from './components/pet-page';\r\nimport { getPetById, getPets, getUserById, getUsers, deletePetById, deleteUserById, updateUserById, updatePetById } from \"./lib/api\";\r\nconst { user } = require(\"./data.json\")\r\nfunction App() {\r\n\r\n  const userContext = useContext(UserContext)\r\n\r\n  \r\n  const handleLogOut = () => {\r\n    localStorage.setItem('user', JSON.stringify(user))\r\n    const reload = window.location.replace(window.location.origin)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <div id=\"h\" className=\"mt-5\">\r\n          <Navbar\r\n            fixed=\"top\"\r\n            className=\"bg-dark mx-5 rounded\"\r\n          >\r\n            <Link to=\"/\">Home</Link>\r\n            {userContext.login ? <>\r\n              <Link to=\"/Profile\">Profile</Link>\r\n              <Link to=\"/my-pets\">My Pets</Link>\r\n              <Link to=\"/pet-page\">Pet Page</Link>\r\n              <Button onClick={() => handleLogOut()}>logOut</Button>\r\n            </> :\r\n              null\r\n            }\r\n            <Link to=\"/search\"> Search</Link>\r\n            {userContext.admin ?\r\n              <>\r\n                <Link to=\"/admin/add-pet\">Add Pet</Link>\r\n                <Link to=\"/admin/dashboard\">Dashboard</Link>\r\n              </>\r\n              : null\r\n            }\r\n            {/* {console.log(adminContext.admin)} */}\r\n          </Navbar>\r\n          <Switch>\r\n            {userContext.admin ?\r\n              <>\r\n                <Route path=\"/admin/add-pet\"><AddPet /></Route>\r\n                <Route path=\"/admin/dashboard\"><Dashboard /></Route>\r\n                <Route path=\"/search\"><Search /></Route>\r\n                <Route path=\"/my-pets\"><MyPetsPage /></Route>\r\n                <Route path=\"/pet-page\"><PetPage/></Route>\r\n                <Route path=\"/profile\"><ProfileSettings /></Route>\r\n                <Route exact path=\"/\"><Homepage /></Route>\r\n              </> :\r\n              <>\r\n                <Route path=\"/search\"><Search /></Route>\r\n                <Route path=\"/my-pets\"><MyPetsPage /></Route>\r\n                <Route path=\"/pet-page\"><PetPage /></Route>\r\n                <Route path=\"/profile\"><ProfileSettings /></Route>\r\n                <Route exact path=\"/\"><Homepage /></Route>\r\n              </>\r\n            }\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\components\\search-page.js",["89"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button, Card, Form, ToggleButton, ToggleButtonGroup } from \"react-bootstrap\"\r\nimport { getPets } from \"../lib/api\";\r\nimport SearchResults from \"./search-results\"\r\n\r\n\r\nexport default function Search() {\r\n\r\n    // const [allPets, setAllPets] = useState({})\r\n    const [searchedPets, setSearchedPets] = useState([])\r\n    const [searchTypeBasic, setSearchTypeBasic] = useState(true);\r\n    const [searchData, setSearchData] = useState({})\r\n    // const [type, setType] = useState(\"dogs\")\r\n\r\n    // const handleBasicSearch = () => {\r\n    //     all\r\n    // }\r\n\r\n    useEffect(() => {\r\n        getPets().then((response) => {\r\n            console.log(response, \"getPets\");\r\n        })\r\n        // return () => {cleanup}\r\n    }, [])\r\n    \r\n    const handleTypeChange = (event) => {\r\n        if (event === 1) { setSearchData({ ...searchData, type: \"cat\" }) }\r\n        else { setSearchData({ ...searchData, type: \"dog\" }) }\r\n    };\r\n\r\n    const handleStatusChange = (event) => {\r\n        if (event === 1) { setSearchData({ ...searchData, status: \"fostered\" }) }\r\n        else if (event === 2) { setSearchData({ ...searchData, status: \"owned\" }) }\r\n        else { setSearchData({ ...searchData, status: \"sheltered\" }) }\r\n    };\r\n\r\n    // const handleAdvancedSearch = (event) => {\r\n    //     event.preventDefault();\r\n    //     let advancedPetArray = []\r\n    //     allPets.forEach((pet) => {\r\n    //         for (const value in searchData) {\r\n    //             for (const prop in pet) {\r\n    //                 if (pet[prop] === searchData && !advancedPetArray.includes(pet))\r\n    //                 { advancedPetArray.push(pet) }\r\n    //             }\r\n    //         }\r\n    //     })\r\n    //     setSearchedPets(advancedPetArray)\r\n    //     console.log(advancedPetArray)\r\n    //     console.log(searchedPets)\r\n    //     setSearchData({ name: \"\", type: \"\", height: 0, weight: 0, status: \"\" })\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <Card className=\"d-flex align-items-center justify-content-center bg-transparent\">\r\n                <Card.Body>\r\n                    <h2 className=\"text-center mb-4\">Search Page</h2>\r\n                    <Form\r\n                        className=\"bg-light\"\r\n                    // onSubmit={(event) => handleAdvancedSearch(event)}\r\n                    >\r\n                        <Button\r\n                            className=\"d-block m-auto\"\r\n                            onClick={() => setSearchTypeBasic(!searchTypeBasic)}\r\n                        >\r\n                            {!searchTypeBasic ? \"Basic\" : \"Advanced\"}\r\n                        </Button>\r\n                        Results of search (List of animal card components that link to the pet page)\r\n                        <Card.Title>{searchTypeBasic ? \"Basic\" : \"Advanced\"} Search Form:</Card.Title>\r\n                        {searchTypeBasic ?\r\n                            <>\r\n                            <Form.Group id=\"type\">\r\n                                <Form.Label className=\"d-block m-auto\" >Pet's Type</Form.Label>\r\n                                <ToggleButtonGroup\r\n                                    type=\"radio\"\r\n                                    name=\"types\"\r\n                                    // onChange={(event) => handleBasicSearch(event)}\r\n                                >\r\n                                    <ToggleButton value={1}>cat</ToggleButton>\r\n                                    <ToggleButton value={2}>dog</ToggleButton>\r\n                                </ToggleButtonGroup>\r\n                            </Form.Group>\r\n                            <SearchResults pets = {searchedPets}/>\r\n                            </>\r\n                            :\r\n                            <>\r\n                                <Form.Group id=\"pet's-Name\">\r\n                                    <Form.Label>Pet's Name</Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        placeholder=\"Name\"\r\n                                        onChange={(event) => setSearchData({ ...searchData, name: event.target.value })}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group id=\"type\">\r\n                                    <Form.Label>Pet's Type</Form.Label>\r\n                                    <ToggleButtonGroup\r\n                                        type=\"radio\"\r\n                                        name=\"types\"\r\n                                        onChange={(event) => handleTypeChange(event)}\r\n                                    >\r\n                                        <ToggleButton value={1}>cat</ToggleButton>\r\n                                        <ToggleButton value={2}>dog</ToggleButton>\r\n                                    </ToggleButtonGroup>\r\n                                </Form.Group>\r\n                                <Form.Group id=\"status\">\r\n                                    <Form.Label> Adoption Status</Form.Label><br />\r\n                                    <ToggleButtonGroup\r\n                                        type=\"radio\"\r\n                                        name=\"types\"\r\n                                        onChange={(event) => handleStatusChange(event)}\r\n                                    >\r\n                                        <ToggleButton value={1}>Fostered</ToggleButton>\r\n                                        <ToggleButton value={2}>Owned</ToggleButton>\r\n                                        <ToggleButton value={3}>Sheltered</ToggleButton>\r\n                                    </ToggleButtonGroup>\r\n                                </Form.Group>\r\n                                <Form.Group id=\"height\">\r\n                                    <Form.Label>Height</Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"number\"\r\n                                        placeholder=\"Height\"\r\n                                        onChange={(event) => setSearchData({ ...searchData, height: event.target.value })}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group id=\"weight\">\r\n                                    <Form.Label>Weight</Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"number\"\r\n                                        placeholder=\"weight\"\r\n                                        onChange={(event) => setSearchData({ ...searchData, weight: event.target.value })}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Button type=\"submit\">Search</Button>\r\n                            </>\r\n                        }\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n            show ten results of pet cards\r\n            {/* {console.log(type)} */}\r\n            <h2 className=\"text-center mb-4\">Search Results</h2>\r\n            \r\n        </>\r\n    );\r\n}",["90","91"],"C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\components\\dashboard.js",[],["92","93"],"C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\lib\\api.js",["94","95"],"import axios from \"axios\";\r\n\r\nexport const postPet = async (data) => {\r\n    console.log(\"api\",data);\r\n    await axios.post('http://localhost:5000/addPet', data)\r\n        .then((response => {\r\n            console.log(response, \"response from postPet\");\r\n        }))\r\n        .catch((error) => {\r\n        console.log(error);\r\n        })\r\n}\r\n\r\nexport const postUser = async (url,data) => {\r\n    await axios.post(url, data)\r\n        .then(response => {\r\n            console.log(response, \"response from postUser\");\r\n            return response.data;\r\n        })\r\n        .then(data => {\r\n            localStorage.setItem('user', JSON.stringify(data))\r\n            // Cookies.set('', data.accessToken)\r\n        })\r\n        .then(() => {\r\n            const reload = window.location.reload()\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n        })\r\n}\r\n\r\nexport const getUsers = async () => {\r\n    const response = await axios.get('http://localhost:5000/api/users')\r\n    const data = response.data\r\n    return data\r\n}\r\n\r\nexport const getPets = async () => {\r\n    const response = await axios.get('http://localhost:5000/api/pets')\r\n    const data = response.data\r\n    return data\r\n}\r\n\r\n// Get Pet By ID API - V\r\n// Route: â€˜/pet/: idâ€™[GET]\r\n// Get a pet by ID should take an id and return the corresponding pet from the database.\r\nexport const getPetById = async (id) => {\r\n    const response = await axios.get(`http://localhost:5000/api/pets/${id}`)\r\n    const data = response.data\r\n    return data\r\n}\r\n\r\n// Get User By ID API\r\n// Route â€˜/user/: idâ€™[GET]\r\n// This api allows you to get a user based on the user's id. \r\n\r\n// Get User By ID API\r\n// Route â€˜/user/: id / fullâ€™[GET]\r\n// This api allows you to get a user based on the user's id. \r\n// The API should return all the user details(aside from password) and the users pets they own.\r\n\r\nexport const getUserById = async (id) => {\r\n    const response = await axios.get(`http://localhost:5000/api/users/${id}`)\r\n    // const data = response.data\r\n    return response\r\n}\r\n\r\nexport const deletePetById = async (id) => {\r\n    const response = await axios.delete(`http://localhost:5000/api/pets/${id}`)\r\n    const data = response.data\r\n    return data\r\n}\r\n\r\nexport const deleteUserById = async (id) => {\r\n    const response = await axios.delete(`http://localhost:5000/api/users/${id}`)\r\n    const data = response.data\r\n    return data\r\n}\r\n\r\n// Ensure that if the email is being changed itâ€™s not already in use\r\nexport const updateUserById = async (id, newUserInfo) => {\r\n    console.log(\"id\",id,\"newUserInfo\",newUserInfo);\r\n    await axios.put(`http://localhost:5000/api/users/${id}`, newUserInfo)\r\n        .then(response => {\r\n            console.log(response, \"response from postUser\");\r\n            return response.data;\r\n        })\r\n        .then(data => {\r\n            localStorage.setItem('user', JSON.stringify(data))\r\n        })\r\n        .then(() => {\r\n            const reload = window.location.reload()\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n        })\r\n}\r\n\r\n// Edit Pet API\r\n// Route: â€˜/pet/: idâ€™[PUT](protected to admin only)\r\n// The add pet api is responsible for editing pets\r\n// Validate all the user input is valid\r\n// Handle photo upload\r\n// Store pet information in the database\r\n// Fields: Same as Add Pet API\r\nexport const updatePetById = async (id) => {\r\n    const response = await axios.put(`http://localhost:5000/api/pets/${id}`)\r\n    const data = response.data\r\n    return data\r\n}\r\n\r\n// Adopt / Foster API\r\n// Route â€˜/pet/: id / adoptâ€™[POST](protected to logged in users)\r\n// The Adopt / Foster API is responsible for adding the pet to the current users pets.\r\n// This API also should change the petâ€™s adoption status.\r\n//     Field:\r\n// Type(Adopt or foster)\r\n\r\n// Return Pet API\r\n// Route â€˜/pet/: id /return â€™[POST](protected to logged in users)\r\n// The Return Pet API is responsible for returning the pet to the agency.\r\n// The API should change the pets status back to available\r\n// The API should remove the pet from the users pets.\r\n\r\n// Save Pet API\r\n// Route â€˜/pet/: id / saveâ€™[POST](protected to logged in users)\r\n// The save PET api allows a user to save a pet for later\r\n// The saved pet should be stored as saved in the users account\r\n\r\n// Delete Saved Pet API\r\n// Route â€˜/pet/: id / saveâ€™[DELETE](protected to logged in users)\r\n// The save PET api allows a user to remove a saved pet.\r\n\r\n// Get Pets By User ID API\r\n// Route â€˜/pet/user /: idâ€™[GET]\r\n// This api allows a user to get the pets owned by(or saved) by a user based on the user id.\r\n\r\n\r\n// export const postUser = async (data) => {\r\n//     await axios.post('http://localhost:5000/api/users', data)\r\n//         .then(response => {\r\n//             console.log(response, \"response from postUser\");\r\n//             return response.data;\r\n//         })\r\n//         .then(data => {\r\n//             localStorage.setItem('user', JSON.stringify(data))\r\n//             // Cookies.set('', data.accessToken)\r\n//         })\r\n//         .then(() => {\r\n//             const reload = window.location.reload()\r\n//         })\r\n//         .catch((error) => {\r\n//             console.log(error);\r\n//         })\r\n// }","C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\components\\addPet.js",[],"C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\components\\search-results.js",["96","97"],"C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\components\\pet-page.js",[],["98","99"],"C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\components\\allUsers.js",[],"C:\\Users\\User\\Desktop\\fullstack\\backend-projects\\projects\\pet-adoption-front-end-Ram-Montilia-Smithson\\src\\components\\allPets.js",[],{"ruleId":"100","severity":1,"message":"101","line":4,"column":39,"nodeType":"102","messageId":"103","endLine":4,"endColumn":48},{"ruleId":"100","severity":1,"message":"104","line":4,"column":26,"nodeType":"102","messageId":"103","endLine":4,"endColumn":34},{"ruleId":"100","severity":1,"message":"105","line":20,"column":9,"nodeType":"102","messageId":"103","endLine":20,"endColumn":16},{"ruleId":"100","severity":1,"message":"106","line":3,"column":7,"nodeType":"102","messageId":"103","endLine":3,"endColumn":11},{"ruleId":"100","severity":1,"message":"101","line":11,"column":29,"nodeType":"102","messageId":"103","endLine":11,"endColumn":38},{"ruleId":"100","severity":1,"message":"107","line":13,"column":10,"nodeType":"102","messageId":"103","endLine":13,"endColumn":20},{"ruleId":"100","severity":1,"message":"108","line":13,"column":22,"nodeType":"102","messageId":"103","endLine":13,"endColumn":29},{"ruleId":"100","severity":1,"message":"109","line":13,"column":31,"nodeType":"102","messageId":"103","endLine":13,"endColumn":42},{"ruleId":"100","severity":1,"message":"104","line":13,"column":44,"nodeType":"102","messageId":"103","endLine":13,"endColumn":52},{"ruleId":"100","severity":1,"message":"110","line":13,"column":54,"nodeType":"102","messageId":"103","endLine":13,"endColumn":67},{"ruleId":"100","severity":1,"message":"111","line":13,"column":69,"nodeType":"102","messageId":"103","endLine":13,"endColumn":83},{"ruleId":"100","severity":1,"message":"112","line":13,"column":85,"nodeType":"102","messageId":"103","endLine":13,"endColumn":99},{"ruleId":"100","severity":1,"message":"113","line":13,"column":101,"nodeType":"102","messageId":"103","endLine":13,"endColumn":114},{"ruleId":"100","severity":1,"message":"114","line":22,"column":11,"nodeType":"102","messageId":"103","endLine":22,"endColumn":17},{"ruleId":"100","severity":1,"message":"115","line":10,"column":26,"nodeType":"102","messageId":"103","endLine":10,"endColumn":41},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"116","replacedBy":"120"},{"ruleId":"118","replacedBy":"121"},{"ruleId":"100","severity":1,"message":"114","line":25,"column":19,"nodeType":"102","messageId":"103","endLine":25,"endColumn":25},{"ruleId":"100","severity":1,"message":"114","line":92,"column":19,"nodeType":"102","messageId":"103","endLine":92,"endColumn":25},{"ruleId":"100","severity":1,"message":"122","line":3,"column":10,"nodeType":"102","messageId":"103","endLine":3,"endColumn":16},{"ruleId":"100","severity":1,"message":"123","line":3,"column":18,"nodeType":"102","messageId":"103","endLine":3,"endColumn":22},{"ruleId":"116","replacedBy":"124"},{"ruleId":"118","replacedBy":"125"},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'getUsers' is defined but never used.","'history' is assigned a value but never used.","'user' is assigned a value but never used.","'getPetById' is defined but never used.","'getPets' is defined but never used.","'getUserById' is defined but never used.","'deletePetById' is defined but never used.","'deleteUserById' is defined but never used.","'updateUserById' is defined but never used.","'updatePetById' is defined but never used.","'reload' is assigned a value but never used.","'setSearchedPets' is assigned a value but never used.","no-native-reassign",["126"],"no-negated-in-lhs",["127"],["126"],["127"],"'Button' is defined but never used.","'Card' is defined but never used.",["126"],["127"],"no-global-assign","no-unsafe-negation"]